# 概要
交差点における車のフローを良くするために, 信号機の制御を最適化問題に帰着させD-Waveを用いて解を求めます.
最適化に用いるのに道路のフローの最大化ですが, 解の良し悪しの指標として待ち時間（のようなもの）を用いています.

# 読んだ論文
[Optimal Control of Traffic Signals using Quantum Annealing](https://arxiv.org/pdf/1912.07134.pdf)


# 問題設定
道路のフロー（車の流れ）を良くするために, 信号の制御を行います.
今回その信号の制御を決定するのに, 最適化問題への定式化 & D-Wave を用います.

一般的に道路のフローを良くするために今回は,
> 1. 交通量の多い道路の車を優先的に流すような信号にする.
> 2. 連続した交差点で連続的に進めるように調整する.

というのを行います.
2の実現によって, 連続して赤信号で止まることの無いようなスムーズな道路のフローが実現されます.

対象とする道路は以下の図のような格子状の交差点の集合とします.
<img title='図1.png' src='/attachments/77cd4666-123e-4dd0-a561-29dbdf656cb3' width="1608" data-meta='{"width":1608,"height":1286}'>

格子点上に信号機, すなわち交差点があるとします.

また今回制御する信号は単に青信号だけではなく, 左右の青信号も考慮に入れます（道路で良く見る下のやつ). 
<img title='maxresdefault.jpg' src='/attachments/fdda3805-dd40-4b3b-bf28-6054918c9f4f' width="1280" data-meta='{"width":1280,"height":720}'>


よって, 一つの交差点に対して, 制御できる信号のパターンは以下の6つあると仮定します. これを論文では「モード」と呼んでいます.
<img title='2.png' src='/attachments/f926f235-a372-44c1-aaa2-87d02cd009b4' width="2796" data-meta='{"width":2796,"height":1508}'>

Fig.2 のモードに左折が含まれていないのは, 歩行者を考えなければ, 左折は右折と比べて対向車の影響が無いためです.
なので今回は左折については考えていないようです.

よって今回決めることは, それぞれの交差点及びそれぞれの時刻で, どのモードにするかを決定します.

## 目的
ここで, 今回目的とするのが, 道路のフローを最大化することです.
道路のフローを最大化するために, 以下の事を考慮します.

1. 一番交通量の多い道路の車が優先的に交差点を進めるようにモードを決定する.
2. 車が通る連続した交差点において, 連続的に通れるようにする.

2の着想は, 赤信号で止まっていた車が, 青信号に変わり出発した後に通る次の交差点で, 再び赤信号で止まることの無いように
というところから来ています.

もちろん道路の交通量は時間と共に常に変化するので, 目的1&2ともに, 時間とともに変化します.
なので今回の論文も, 時間に対して逐次的に解を求めることにしています.


# 定式化
定式化を用いるのに決定変数を以下のように定義します.

$$
x_{ij} = \begin{cases}
    1 & (交差点 i でモード j を有効にするとき) \\
    0 & ( otherwise )
  \end{cases}
\tag{1}
$$

## 目的1
式(1)を用いて, 目的1「交通量の多い道路の車を優先的に流す」は以下のように書くことができます.
$$
Q_1 = - \lambda_1 \sum_{i=1} ^ n \sum_{j=1}^6 C_{ij} x_{ij}
\tag{2}
$$

次ここで, $$\lambda_1$$は重みを調節するパラメータ, $$C_{ij}$$は交差点$$i$$のモードを$$j$$にすることで減らせる車の量の最大値です.
すなわち, $$C_{ij}$$は$$x_{ij}=1$$としたときに, 何台の車が交差点を進むことができるかを表しています.

$$Q_1$$は, 交差点を進める車を多くすればするほど, 小さい値を取ることになります. 
よって, $$Q_1$$を最小化するような$$x_{ij}$$を求めることによって, 目的1を達成することができます.

$$C_{ij}$$の計算方法を次に考えます.
そのために, 交差点$$i$$に接続する道路の交通量を以下の図のように定義します.

<img title='3.png' src='/attachments/f61a84ed-038c-442d-b3ea-edbb006581e7' width="2318" data-meta='{"width":2318,"height":716}'>

> $$ a_i ^k ：交差点 i に接続するポジション k の道路で止まっている車の量$$

全ての車が直進するわけでは無く右折する車も存在します. 
なので直進する割合を以下の図のように$$f$$とします.

<img title='4.png' src='/attachments/be4f2997-6448-4053-9df7-6cb7460788d6' width="2008" data-meta='{"width":2008,"height":700}'>

> $$ f_i^k ： 交差点 i ポジションkの車で直進する車の割合 $$

これより, $$C_{ij}$$はそれぞれのモード$$j$$に対して以下のようになります.

<img title='5.png' src='/attachments/8bc99996-6cf0-4774-96cf-8bb5cb8d52c4' width="1434" data-meta='{"width":1434,"height":552}'>


## 目的2
目的2「車が通る連続した交差点において, 連続的に通れるようにする.」を式で記述すると以下のようになります.

<img title='式.png' src='/attachments/162e3ea6-d14c-481a-85bb-396759c19a81' width="2288" data-meta='{"width":2288,"height":204}'>

長いので抜き出して抜き出して考えてみます.

$$
- \lambda_2 \sum_i ^n \sum_j ^6 C_{ij} x_{ij} [ \tau _{i,a'} \lambda_3 C_{a' a} x_{a' a} ]
\tag{11}
$$

交差点$$i$$のモード$$j$$が決定されて, 移動した車について考えましょう.
その車は次の交差点$$a'$$に差し掛かります.

それらの車が交差点$$a'$$で止まることなく, 連続して通り抜けるようなモード$$a$$を選べば, 
それによって移動できる車$$C_{a',a}$$に応じたコストが減少します.

交差点$$i$$から$$a'$$に着くまでにもちろん時間がかかります.
その時間に関する0-1のパラメータが$$\tau_{i,a'}$$です.

交差点$$i$$でのモードの決定によって移動した車が, 次にどこの交差点に着くか, 
また, その交差点でどのモードにすればコストが下がるのかを表したのが次の図です.

<img title='aaa.png' src='/attachments/1373cdcb-cc6c-4d55-8da4-cb63c182d5f2' width="2310" data-meta='{"width":2310,"height":888}'>

もちろん, 全ての車を連続して交差点を通過させることは不可能なので, 
連続して通過できる車の台数に応じてコストが減少するように, $$C_{ij}, C_{a',a}$$が係数にかかっています.

$$\lambda_3'$$と$$\lambda_3$$はそれぞれ右折する車or直進する車どちらを重点に置くかのパラメータです.

前に述べた時間に関するパラメータ$$\tau_{i,i'}$$に関してもう少し詳しく説明します.

今所与の値として, 以下のモノがわかっているとします.
> 交差点間の道路の長さ
> 交差点間を走行する車の平均速度（車の混雑度を考慮にいれる）

するとこの二つから, 車の交差点間の走行にかかる平均的な時間がわかります.
それを$$\Delta t_{i i'}$$とします.

また現在の時間を$$t$$をしたときに, そこから$$\Delta t_{i i'}$$時間たったときのみ, $$\tau_{i i'}$$が1となるように設定します.

数式でかくと, 
$$
\tau_{i i'} = \begin{cases}
    1 & (t \ \ mod \ \ \Delta t_{i i'} \sim 0) \\
    0 & ( otherwise )
  \end{cases}
\tag{12}
$$

もし, $$t <  \Delta t_{i i'}$$ならば, 以下のようにします.
$$
\tau_{i i'} = \begin{cases}
    1 & (\Delta t_{i i'} - t \sim 0) \\
    0 & ( otherwise )
  \end{cases}
\tag{13}
$$

これによって, ある車が差し掛かってる現在の交差点と, 次に差し掛かる交差点の信号の同期は, 
交差点間を横断してからになります.

<img title='aaaaaa.png' src='/attachments/2fa5e538-b346-4876-9c10-e4f8a9956dd9' width="2284" data-meta='{"width":2284,"height":842}'>


## 制約条件
それぞれの交差点で, 一度に有効にできるモードはピッタリ１つです.
なので, 制約式は以下のようにすれば良さそうです.

$$
Q_3 = \lambda_4 \sum_i \{  1 - \sum_{j=1}^6 x_{ij}  \}^2
\tag{14}
$$

一つの交差点で, 丁度１つのモードが有効にならないと$$Q_3$$が上昇します.


## 目的関数
最終的な目的関数が以下のようになります.

<img title='式2.png' src='/attachments/85039b1f-9699-4062-96d1-3e1d696c9bb6' width="2264" data-meta='{"width":2264,"height":454}'>

# シミュレーション
今回の問題は時間に依存するため, シミュレーションと最適化問題を交互に行います.
まず, 最初の状態で最適化問題$$Q_1 + Q_2$$を解きます.

それを元に信号機の色を配置し, シミュレーションを用いて実際に車を動かします.

そのシミュレーションを元に次の時刻に用いる最適化問題のパラメータを求めます($$C_{ij}, \tau_{i i'}$$など).
車の混雑度などから, 交差点間の移動にかかる平均時間($$\Delta t_{i i'}$$)を求め, 最適化問題を解く時間間隔$$t$$を元に同期させる信号を選びます($$\tau_{i i'}$$)の決定.

そしてそれを元に次から(14)式の同期を含めた最適化問題を解きます.

以上を繰り返します.

# 実験
今回は古典的な方法であるタブサーチとQuantum Annealingを比べます.
また, 信号の同期がある場合と無い場合でも比べます.

今回最適化する目的関数は, 「混雑度を解消している」抽象的な関数になっているので, 
解の良し悪しには他の評価指標を用います.

信号待ちした車がどれくらい時間を無駄にしたかを使います.
<img title='bb.png' src='/attachments/3265716b-8a1c-4488-bbae-0d47a29099fd' width="1490" data-meta='{"width":1490,"height":188}'>


最適化問題をタブサーチを用いた結果は以下のようになりました.
<img title='結果.png' src='/attachments/a0337b92-feff-4b2b-9fb6-1bc2da3b8fac' width="1282" data-meta='{"width":1282,"height":922}'>

量子アニーリングを使って$$Q_1 + Q_2 + Q_3$$を解くと, 31.28とタブサーチより悪い結果になってしまいました.


# 考察
同期の効果が薄い. あんまりうまく同期を使えて無いんじゃないか.
評価指標の式がおかしいんじゃないかとおもう.
分子はセグメントの距離じゃないか.
